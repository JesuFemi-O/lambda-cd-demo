name: Python Linting with Black

on:
  pull_request:
    types: [ opened, reopened, synchronize, edited ]

jobs:
  flake8-lint:
    runs-on: ubuntu-latest
    name: python linters
    steps:
      - name: Check out source repository
        uses: actions/checkout@v3
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Install linter dependencies
        run: |
          python -m pip install pip==22.2.2
          pip install -r requirements-lint.txt
      - name: Check for python file changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          list-files: 'shell'
          filters: |
            py_scripts_filter:
              - added|modified: '**/*.py'
      - name: Run linter
        if: ${{ steps.filter.outputs.py_scripts_filter == 'true' }}
        run: |
          echo "Changed python files: ${{ steps.filter.outputs.py_scripts_filter_files }}"
          lint_output_formatted=$(echo "${lint_output}" | jq -s -R @csv)
          black_output_formatted=$(echo "${black_output}" | jq -s -R @csv)
          isort_output_formatted=$(echo "${isort_output}" | jq -s -R @csv)

          # Debugging: Print linting outputs
          echo "FLAKE8_OUTPUT=${lint_output}"
          echo "BLACK_OUTPUT=${black_output}"
          echo "ISORT_OUTPUT=${isort_output}"

          # Store lint outputs as environment variables
          echo "FLAKE8_OUTPUT=${lint_output}" >> $GITHUB_ENV
          echo "BLACK_OUTPUT=${black_output}" >> $GITHUB_ENV
          echo "ISORT_OUTPUT=${isort_output}" >> $GITHUB_ENV
      
      - name: Generate annotations
        if: ${{ steps.filter.outputs.py_scripts_filter == 'true' }}
        run: |
          # Check if there are linting errors and create annotations

          # FLAKE8 linting
          if [ -n "${FLAKE8_OUTPUT}" ]; then
            lint_output_lines="${FLAKE8_OUTPUT}"
            echo "::error file=${{ steps.filter.outputs.py_scripts_filter_files }}::${lint_output_lines}"
          fi

          # BLACK linting
          if [ -n "${BLACK_OUTPUT}" ]; then
            black_output_lines="${BLACK_OUTPUT}"
            echo "::error file=${{ steps.filter.outputs.py_scripts_filter_files }}::${black_output_lines}"
          fi

          # ISORT linting
          if [ -n "${ISORT_OUTPUT}" ]; then
            isort_output_lines="${ISORT_OUTPUT}"
            echo "::error file=${{ steps.filter.outputs.py_scripts_filter_files }}::${isort_output_lines}"
          fi

          # Fail the job if there are any errors
          if [ -n "${FLAKE8_OUTPUT}" ] || [ -n "${BLACK_OUTPUT}" ] || [ -n "${ISORT_OUTPUT}" ]; then
            exit 1
          fi
